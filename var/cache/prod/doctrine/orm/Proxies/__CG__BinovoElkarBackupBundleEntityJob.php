<?php

namespace Proxies\__CG__\Binovo\ElkarBackupBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Job extends \Binovo\ElkarBackupBundle\Entity\Job implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'client', 'description', 'id', 'isActive', 'name', 'notificationsEmail', 'notificationsTo', 'minNotificationLevel', 'include', 'exclude', 'policy', 'postScripts', 'preScripts', 'path', 'diskUsage', 'priority', 'useLocalPermissions', 'logEntry', 'status', 'token', 'backupLocation'];
        }

        return ['__isInitialized__', 'client', 'description', 'id', 'isActive', 'name', 'notificationsEmail', 'notificationsTo', 'minNotificationLevel', 'include', 'exclude', 'policy', 'postScripts', 'preScripts', 'path', 'diskUsage', 'priority', 'useLocalPermissions', 'logEntry', 'status', 'token', 'backupLocation'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Job $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getSnapshotRoot()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSnapshotRoot', []);

        return parent::getSnapshotRoot();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setPath($path)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPath', [$path]);

        return parent::setPath($path);
    }

    /**
     * {@inheritDoc}
     */
    public function getPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPath', []);

        return parent::getPath();
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', []);

        return parent::getUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setClient(\Binovo\ElkarBackupBundle\Entity\Client $client = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClient', [$client]);

        return parent::setClient($client);
    }

    /**
     * {@inheritDoc}
     */
    public function getClient()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClient', []);

        return parent::getClient();
    }

    /**
     * {@inheritDoc}
     */
    public function setInclude($include)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInclude', [$include]);

        return parent::setInclude($include);
    }

    /**
     * {@inheritDoc}
     */
    public function getInclude()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInclude', []);

        return parent::getInclude();
    }

    /**
     * {@inheritDoc}
     */
    public function setExclude($exclude)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExclude', [$exclude]);

        return parent::setExclude($exclude);
    }

    /**
     * {@inheritDoc}
     */
    public function getExclude()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExclude', []);

        return parent::getExclude();
    }

    /**
     * {@inheritDoc}
     */
    public function setPolicy(\Binovo\ElkarBackupBundle\Entity\Policy $policy = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPolicy', [$policy]);

        return parent::setPolicy($policy);
    }

    /**
     * {@inheritDoc}
     */
    public function getPolicy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPolicy', []);

        return parent::getPolicy();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsActive($isActive)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsActive', [$isActive]);

        return parent::setIsActive($isActive);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsActive', []);

        return parent::getIsActive();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotificationsTo($notificationsTo)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotificationsTo', [$notificationsTo]);

        return parent::setNotificationsTo($notificationsTo);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotificationsTo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotificationsTo', []);

        return parent::getNotificationsTo();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotificationsEmail($notificationsEmail)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotificationsEmail', [$notificationsEmail]);

        return parent::setNotificationsEmail($notificationsEmail);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotificationsEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotificationsEmail', []);

        return parent::getNotificationsEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setMinNotificationLevel($minNotificationLevel)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMinNotificationLevel', [$minNotificationLevel]);

        return parent::setMinNotificationLevel($minNotificationLevel);
    }

    /**
     * {@inheritDoc}
     */
    public function getMinNotificationLevel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMinNotificationLevel', []);

        return parent::getMinNotificationLevel();
    }

    /**
     * {@inheritDoc}
     */
    public function setLogEntry(\Binovo\ElkarBackupBundle\Entity\LogRecord $logEntry = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLogEntry', [$logEntry]);

        return parent::setLogEntry($logEntry);
    }

    /**
     * {@inheritDoc}
     */
    public function getLogEntry()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLogEntry', []);

        return parent::getLogEntry();
    }

    /**
     * {@inheritDoc}
     */
    public function setDiskUsage($diskUsage)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDiskUsage', [$diskUsage]);

        return parent::setDiskUsage($diskUsage);
    }

    /**
     * {@inheritDoc}
     */
    public function getDiskUsage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDiskUsage', []);

        return parent::getDiskUsage();
    }

    /**
     * {@inheritDoc}
     */
    public function setPriority($Priority)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPriority', [$Priority]);

        return parent::setPriority($Priority);
    }

    /**
     * {@inheritDoc}
     */
    public function getPriority()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPriority', []);

        return parent::getPriority();
    }

    /**
     * {@inheritDoc}
     */
    public function setUseLocalPermissions($useLocalPermissions)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUseLocalPermissions', [$useLocalPermissions]);

        return parent::setUseLocalPermissions($useLocalPermissions);
    }

    /**
     * {@inheritDoc}
     */
    public function getUseLocalPermissions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUseLocalPermissions', []);

        return parent::getUseLocalPermissions();
    }

    /**
     * {@inheritDoc}
     */
    public function addPostScript(\Binovo\ElkarBackupBundle\Entity\Script $postScript)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPostScript', [$postScript]);

        return parent::addPostScript($postScript);
    }

    /**
     * {@inheritDoc}
     */
    public function removePostScript(\Binovo\ElkarBackupBundle\Entity\Script $postScript)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePostScript', [$postScript]);

        return parent::removePostScript($postScript);
    }

    /**
     * {@inheritDoc}
     */
    public function addPreScript(\Binovo\ElkarBackupBundle\Entity\Script $preScripts)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPreScript', [$preScripts]);

        return parent::addPreScript($preScripts);
    }

    /**
     * {@inheritDoc}
     */
    public function removePreScript(\Binovo\ElkarBackupBundle\Entity\Script $preScripts)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePreScript', [$preScripts]);

        return parent::removePreScript($preScripts);
    }

    /**
     * {@inheritDoc}
     */
    public function getPreScripts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPreScripts', []);

        return parent::getPreScripts();
    }

    /**
     * {@inheritDoc}
     */
    public function getPostScripts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPostScripts', []);

        return parent::getPostScripts();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function isRunning()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isRunning', []);

        return parent::isRunning();
    }

    /**
     * {@inheritDoc}
     */
    public function setToken($token)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setToken', [$token]);

        return parent::setToken($token);
    }

    /**
     * {@inheritDoc}
     */
    public function getToken()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getToken', []);

        return parent::getToken();
    }

    /**
     * {@inheritDoc}
     */
    public function getBackupLocation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBackupLocation', []);

        return parent::getBackupLocation();
    }

    /**
     * {@inheritDoc}
     */
    public function setBackupLocation($backupLocation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBackupLocation', [$backupLocation]);

        return parent::setBackupLocation($backupLocation);
    }

}
